<?php

/*
Copyright (C) 2008  Simon Emery

This file is part of OIOpublisher Direct.
*/

if(!defined('oiopub')) die();


/* DO NOT EDIT THIS FILE - edit config.php in the root directory instead */

class oiopub_config {

	var $errors = array();

	//init
	function oiopub_config() {
		global $oiopub_set;
		//load config vars
		include($oiopub_set->folder_dir . "/config.php");
		//check db vars
		$this->vars_check();
		//standalone check
		$this->standalone_check();
		//wordpress check
		$this->wordpress_check();
		//fallback check
		$this->fallback_check();
	}
	
	//display errors
	function display_errors() {
		global $oiopub_set;
		if($oiopub_set->db_missing == 1) {
			$this->errors[] = "Open the OIOpublisher 'config.php' file in the '" . $oiopub_set->folder_name . "' directory, and fill in the database connection info where indicated";
		}
		if(empty($oiopub_set->plugin_url) && !defined('OIOPUB_LOAD_LITE')) {
			$this->errors[] = "Open the OIOpublisher 'config.php' file in the '" . $oiopub_set->folder_name . "' directory, and fill in the plugin_url variable where indicated";
		}
		if(!empty($this->errors) && is_array($this->errors)) {
			echo "<b>OIOpublisher Setup Requirements:</b>\n";
			echo "<br />\n";
			echo "<ul>\n";
			foreach($this->errors as $e) {
				echo "<li>" . $e . "</li>\n";
			}
			echo "<li>After you have dealt with the issues above, please refresh this page</li>\n";
			echo "</ul>\n";
			echo "<br />\n";
			echo "<i>For an explanation of how to deal with these errors, please <a href='http://www.oiopublisher.com/install_errors.php' target='_blank'>click here</a></i>\n";
			die();
		}
	}
	
	//vars check
	function vars_check() {
		global $oiopub_set;
		$oiopub_set->dbh = "";
		$oiopub_set->db_missing = 0;
		if(is_array($oiopub_set->db_args) && count($oiopub_set->db_args) > 0) {
			foreach($oiopub_set->db_args as $key => $val) {
				if(empty($val) && $key != "db_pass") {
					$oiopub_set->db_missing = 1;
				}
			}
		} else {
			$oiopub_set->db_missing = 1;
		}
	}
	
	//no platform selected
	function fallback_check() {
		global $oiopub_set;
		if(empty($oiopub_set->platform)) {
			$oiopub_set->platform = "standalone";
		}
	}
	
	//set extra vars
	function set_extras() {
		global $oiopub_set;
		$method = "{$oiopub_set->platform}_set_extras";
		if(method_exists($this, $method)) {
			$this->{$method}();
		}
	}
	
	//standalone mode check
	function standalone_check() {
		global $oiopub_set;
		if(empty($oiopub_set->platform)) {
			if(OIOPUB_PLATFORM == "standalone") {
				$oiopub_set->platform = "standalone";
			}
		}
	}
	
	//wordpress mode check
	function wordpress_check() {
		global $oiopub_set, $wpdb;
		//platform already set?
		if(!empty($oiopub_set->platform)) {
			return;
		}
		//is this a Wordpress install?
		if(OIOPUB_PLATFORM != "wordpress" && strpos($oiopub_set->folder_dir, '/plugins/') === false) {
			return;
		}
		//set default options
		$oiopub_set->platform = "wordpress";
		$oiopub_set->db_missing = 0;
		//request uri
		$request_uri = strip_tags($_SERVER['REQUEST_URI']);
		//WP config dir
		$wp_config_dir = $oiopub_set->wp_config ? dirname($oiopub_set->wp_config) : dirname(dirname(dirname($oiopub_set->folder_dir)));
		//WP database found?
		if(isset($wpdb) && function_exists('get_option')) {
			//v1.xx upgrade hack
			if($version = get_option('oiopub_version')) {
				$current = get_option('active_plugins');
				$plugin_old = $oiopub_set->folder_name . "/index.php";
				$plugin_new = $oiopub_set->folder_name . "/wp.php";
				if(!empty($current) && in_array($plugin_old, $current)) {
					foreach($current as $key => $value) {
						if($value == $plugin_old) {
							$current[$key] = $plugin_new;
						}
					}
					sort($current);
					update_option('active_plugins', $current);
					header("Location: " . $request_uri);
					exit();
				}
			}
			return;
		}
		//find WP config file?
		if(empty($oiopub_set->wp_config)) {
			//check for wp-load
			if(file_exists($wp_config_dir . "/wp-load.php")) {
				$oiopub_set->wp_config = $wp_config_dir . "/wp-load.php";
			} else {
				$oiopub_set->wp_config = $wp_config_dir . "/wp-config.php";
			}
		}
		//WP config file exists?
		if(!file_exists($oiopub_set->wp_config)) {
			$this->errors[] = "Cannot find the Wordpress 'wp-config.php' file. You can add a custom path to this file by editing the OIOpublisher 'config.php' file, in the '" . $oiopub_set->folder_name . "' directory\n";
			return;
		}
		//end request?
		if(!defined('OIOPUB_LOAD_LITE')) {
			$oiopub_set->wp_load = 1;
			return;
		}
		//js category request?
		if(strpos($request_uri, "js_http.php") !== false && strpos($request_uri, "%26category%3D") !== false) {
			$oiopub_set->wp_load = 1;
			return;
		}
		//is WPMU?
		if(file_exists($wp_config_dir . "/wpmu-settings.php")) {
			$oiopub_set->wp_load = 1;
			return;
		}
		//parse WP config file
		$oiopub_set->db_args = $this->wordpress_config_parse();
		//successfully parsed?
		if(empty($oiopub_set->db_args['db_host']) || empty($oiopub_set->db_args['db_user']) || empty($oiopub_set->db_args['db_name'])) {
			$oiopub_set->db_args = array();
			$oiopub_set->wp_load = 1;
			return;
		}
		//multi-site setup?
		if(isset($oiopub_set->db_args['multi_site']) && $oiopub_set->db_args['multi_site'] && !$oiopub_set->prefix) {
			$oiopub_set->db_args = array();
			$oiopub_set->wp_load = 1;
			return;
		}
		//use standalone mode
		$oiopub_set->platform = "standalone";
		$oiopub_set->prefix = $oiopub_set->prefix ? $oiopub_set->prefix : $oiopub_set->db_args['db_prefix'];
		$oiopub_set->db_missing = 0;
	}

	//set extra wordpress vars
	function wordpress_set_extras() {
		global $oiopub_set, $wpdb;
		//set db connection?
		if(isset($wpdb) && $wpdb) {
			$oiopub_set->dbh = $wpdb->dbh;
			$oiopub_set->prefix = $oiopub_set->prefix ? $oiopub_set->prefix : $wpdb->prefix;
		}
		//set plugin url?
		if(empty($oiopub_set->plugin_url)) {
			if(function_exists('plugins_url') && $url = plugins_url()) {
				$oiopub_set->plugin_url = rtrim($url, '/') . '/' . $oiopub_set->folder_name;
			} elseif(function_exists('get_option') && $url = get_option('siteurl')) {
				$oiopub_set->plugin_url = rtrim($url, '/') . '/wp-content/plugins/' . $oiopub_set->folder_name;
			} else {
				$oiopub_set->plugin_url = 'http://' . oiopub_clean($_SERVER['HTTP_HOST']) . '/wp-content/plugins/' . $oiopub_set->folder_name;
			}
		}
	}
	
	//parse config (lite load)
	function wordpress_config_parse() {
		global $oiopub_set;
		$vars = array();
		//get config file path
		$config = str_replace("wp-load.php", "wp-config.php", $oiopub_set->wp_config);
		//check file exists
		if(!file_exists($config)) {
			$config = dirname(dirname($config)) . "/wp-config.php";
		}
		//parse file
		if($file = @file($config)) {
			foreach($file as $key => $val) {
				//trime line
				$val = trim($val);
				//line commented out?
				if(strpos($val, '//') === 0 || strpos($val, '/*') === 0) {
					continue;
				}
				if(preg_match("/DB_HOST/", $val)) {
					if(preg_match('/\,(.*)\)\;/', $val, $matches)) {
						$match = str_replace('"', "'", trim($matches[1]));
						if(substr($match, 0, 1) == "'") {
							$vars['db_host'] = trim($match, "'");
							continue;
						}
					}
					return false;
				}
				if(preg_match("/DB_USER/", $val)) {
					if(preg_match('/\,(.*)\)\;/', $val, $matches)) {
						$match = str_replace('"', "'", trim($matches[1]));
						if(substr($match, 0, 1) == "'") {
							$vars['db_user'] = trim($match, "'");
							continue;
						}
					}
					return false;
				}
				if(preg_match("/DB_PASSWORD/", $val)) {
					if(preg_match('/\,(.*)\)\;/', $val, $matches)) {
						$match = str_replace('"', "'", trim($matches[1]));
						if(substr($match, 0, 1) == "'") {
							$vars['db_pass'] = trim($match, "'");
							continue;
						}
					}
					return false;
				}
				if(preg_match("/DB_NAME/", $val)) {
					if(preg_match('/\,(.*)\)\;/', $val, $matches)) {
						$match = str_replace('"', "'", trim($matches[1]));
						if(substr($match, 0, 1) == "'") {
							$vars['db_name'] = trim($match, "'");
							continue;
						}
					}
					return false;
				}
				if(preg_match("/DOMAIN_CURRENT_SITE/", $val)) {
					if(preg_match('/\,(.*)\)\;/', $val, $matches)) {
						$match = str_replace('"', "'", trim($matches[1]));
						if(substr($match, 0, 1) == "'") {
							$vars['multi_site'] = (bool) trim($match, "'");
							continue;
						}
					}
					return false;
				}
				if(preg_match("/SUBDOMAIN_INSTALL/", $val)) {
					if(preg_match('/\,(.*)\)\;/', $val, $matches)) {
						$match = str_replace('"', "'", trim($matches[1]));
						if(!isset($vars['multi_site'])) {
							$vars['multi_site'] = (bool) trim($match, "'");
						}
						continue;
					}
					return false;
				}
				if(preg_match("/table_prefix/", $val)) {
					if(preg_match('/\=(.*)\;/', $val, $matches)) {
						$match = str_replace('"', "'", trim($matches[1]));
						if(substr($match, 0, 1) == "'") {
							$vars['db_prefix'] = trim($match, "'");
							continue;
						}
					}
					return false;
				}
			}
		}
		return $vars;
	}
	
}

?>